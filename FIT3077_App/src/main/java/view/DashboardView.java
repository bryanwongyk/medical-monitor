package view;

import iterator.BiometricIterator;
import java.awt.Color;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Biometric;
import model.DashboardModel;
import model.ObservationName;
import model.ObserveStorage;
import model.Patient;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 * The view class of the dashboard feature.
 * 
 * This class is instantiated with a DashboardController and DashboardModel object, from which it 
 * receives information to draw to the screen.
 * 
 * An instance of this class is created by a LoginController instance, once 
 * login is successful.
 * 
 * @author Bryan
 */
public class DashboardView extends javax.swing.JFrame {
    /**
     * Creates new form DashboardView
     * 
     * @param dashboardModel the DashboardModel object from which this instance 
     * will receive information to draw to the screen.
     */
    private DashboardModel model;
    private ObserveStorage storage;
    private ObservationName observationName;
    private MonitorSelector monitorSelector = new MonitorSelector(this);
    // For bar chart
    private DefaultCategoryDataset cholesterolDcd = new DefaultCategoryDataset();
    
    /**
     * Constructor for DashboardView.
     * @param model DashboardModel - model which handles business logic.
     * @param storage ObserveStorage - storage to retrieve data from. 
     */
    public DashboardView(DashboardModel model, ObserveStorage storage) {
        this.model = model;
        this.storage = storage;
        initComponents(); // initialise JFrame objects from Netbeans GUI Builder
        initView();
    }
    
    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        window = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        dashboardLabel = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        practitionerNameLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JTabbedPane();
        patientsTabPanel = new javax.swing.JPanel();
        patientTableScroll = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        cholesterolBtn = new javax.swing.JButton();
        monitorLabel = new javax.swing.JLabel();
        patientErrorTextArea = new javax.swing.JTextArea();
        bloodBtn = new javax.swing.JButton();
        monitorsTabPanel = new javax.swing.JPanel();
        cholesterolTablePanel = new javax.swing.JPanel();
        cholesterolTableScroll = new javax.swing.JScrollPane();
        cholesterolTable = new javax.swing.JTable();
        cholesterolOptionsLabel = new javax.swing.JLabel();
        cholesterolDetailsBtn = new javax.swing.JButton();
        removeCholesterolBtn = new javax.swing.JButton();
        cholesterolLabel = new javax.swing.JLabel();
        cholesterolBarChartPanel = new javax.swing.JPanel();
        bloodTablePanel = new javax.swing.JPanel();
        bloodTableScroll = new javax.swing.JScrollPane();
        bloodTable = new javax.swing.JTable();
        bloodLabel = new javax.swing.JLabel();
        bloodOptionsLabel = new javax.swing.JLabel();
        removeBloodBtn = new javax.swing.JButton();
        bloodDetailsBtn = new javax.swing.JButton();
        systolicThresholdText = new javax.swing.JTextArea();
        systolicThresholdLabel = new javax.swing.JLabel();
        diastolicThresholdLabel = new javax.swing.JLabel();
        diastolicThresholdText = new javax.swing.JTextArea();
        thresholdUpdateBtn = new javax.swing.JButton();
        systolicErrorLabel = new javax.swing.JLabel();
        globalOptionsPanel = new javax.swing.JPanel();
        freqText = new javax.swing.JTextArea();
        freqUpdateBtn = new javax.swing.JButton();
        freqLabel = new javax.swing.JLabel();
        patientDetailsLabel = new javax.swing.JLabel();
        patientDetailsTextArea = new javax.swing.JTextArea();
        freqUpdateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        window.setBackground(new java.awt.Color(52, 78, 92));

        headerPanel.setBackground(new java.awt.Color(239, 61, 89));

        dashboardLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        dashboardLabel.setForeground(new java.awt.Color(255, 255, 255));
        dashboardLabel.setText("DASHBOARD");

        welcomeLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLabel.setText("Welcome ");

        practitionerNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        practitionerNameLabel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(practitionerNameLabel))
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(593, 593, 593)
                        .addComponent(dashboardLabel)))
                .addContainerGap(891, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(welcomeLabel)
                            .addComponent(practitionerNameLabel)))
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(dashboardLabel)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        patientTable.setAutoCreateRowSorter(true);
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Given Name", "Surname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        patientTable.getTableHeader().setReorderingAllowed(false);
        patientTableScroll.setViewportView(patientTable);
        patientTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (patientTable.getColumnModel().getColumnCount() > 0) {
            patientTable.getColumnModel().getColumn(0).setResizable(false);
            patientTable.getColumnModel().getColumn(1).setResizable(false);
            patientTable.getColumnModel().getColumn(2).setResizable(false);
        }

        cholesterolBtn.setBackground(new java.awt.Color(74, 177, 157));
        cholesterolBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cholesterolBtn.setText("Cholesterol");
        cholesterolBtn.setToolTipText("");
        cholesterolBtn.setBorderPainted(false);
        cholesterolBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        monitorLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        monitorLabel.setText("Add monitor for selected patient");

        patientErrorTextArea.setBackground(new java.awt.Color(240, 240, 240));
        patientErrorTextArea.setColumns(20);
        patientErrorTextArea.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        patientErrorTextArea.setForeground(new java.awt.Color(240, 0, 0));
        patientErrorTextArea.setLineWrap(true);
        patientErrorTextArea.setRows(5);
        patientErrorTextArea.setBorder(null);

        bloodBtn.setBackground(new java.awt.Color(239, 201, 88));
        bloodBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bloodBtn.setText("Blood Pressure");
        bloodBtn.setToolTipText("");
        bloodBtn.setBorderPainted(false);
        bloodBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout patientsTabPanelLayout = new javax.swing.GroupLayout(patientsTabPanel);
        patientsTabPanel.setLayout(patientsTabPanelLayout);
        patientsTabPanelLayout.setHorizontalGroup(
            patientsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientsTabPanelLayout.createSequentialGroup()
                .addComponent(patientTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(patientsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monitorLabel)
                    .addComponent(patientErrorTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cholesterolBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bloodBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 757, Short.MAX_VALUE))
        );
        patientsTabPanelLayout.setVerticalGroup(
            patientsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientTableScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
            .addGroup(patientsTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monitorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cholesterolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bloodBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(patientErrorTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.addTab("Patients", patientsTabPanel);

        cholesterolTablePanel.setBackground(new java.awt.Color(74, 177, 157));

        cholesterolTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "TOTAL CHOLESTEROL", "TIME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cholesterolTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cholesterolTable.getTableHeader().setReorderingAllowed(false);
        cholesterolTableScroll.setViewportView(cholesterolTable);
        cholesterolTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (cholesterolTable.getColumnModel().getColumnCount() > 0) {
            cholesterolTable.getColumnModel().getColumn(0).setResizable(false);
            cholesterolTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            cholesterolTable.getColumnModel().getColumn(1).setResizable(false);
            cholesterolTable.getColumnModel().getColumn(2).setResizable(false);
            cholesterolTable.getColumnModel().getColumn(3).setResizable(false);
            cholesterolTable.getColumnModel().getColumn(3).setPreferredWidth(120);
        }

        cholesterolOptionsLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cholesterolOptionsLabel.setText("Selected monitor options");

        cholesterolDetailsBtn.setText("View patient details");

        removeCholesterolBtn.setText("Remove cholesterol monitor");

        cholesterolLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cholesterolLabel.setText("Cholesterol");

        cholesterolBarChartPanel.setBackground(new java.awt.Color(204, 214, 223));
        cholesterolBarChartPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout cholesterolTablePanelLayout = new javax.swing.GroupLayout(cholesterolTablePanel);
        cholesterolTablePanel.setLayout(cholesterolTablePanelLayout);
        cholesterolTablePanelLayout.setHorizontalGroup(
            cholesterolTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cholesterolTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cholesterolTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cholesterolTableScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cholesterolTablePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cholesterolBarChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cholesterolTablePanelLayout.createSequentialGroup()
                        .addGroup(cholesterolTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cholesterolTablePanelLayout.createSequentialGroup()
                                .addComponent(cholesterolOptionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cholesterolDetailsBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeCholesterolBtn))
                            .addComponent(cholesterolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        cholesterolTablePanelLayout.setVerticalGroup(
            cholesterolTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cholesterolTablePanelLayout.createSequentialGroup()
                .addComponent(cholesterolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cholesterolTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cholesterolTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cholesterolOptionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeCholesterolBtn)
                    .addComponent(cholesterolDetailsBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cholesterolBarChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bloodTablePanel.setBackground(new java.awt.Color(239, 201, 88));

        bloodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "SYSTOLIC BLOOD PRESSURE", "DIASTOLIC BLOOD PRESSURE", "TIME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bloodTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        bloodTable.getTableHeader().setReorderingAllowed(false);
        bloodTableScroll.setViewportView(bloodTable);
        bloodTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (bloodTable.getColumnModel().getColumnCount() > 0) {
            bloodTable.getColumnModel().getColumn(0).setResizable(false);
            bloodTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            bloodTable.getColumnModel().getColumn(1).setResizable(false);
            bloodTable.getColumnModel().getColumn(2).setResizable(false);
            bloodTable.getColumnModel().getColumn(4).setResizable(false);
            bloodTable.getColumnModel().getColumn(4).setPreferredWidth(120);
        }

        bloodLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        bloodLabel.setText("Blood Pressure");

        bloodOptionsLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bloodOptionsLabel.setText("Selected monitor options");

        removeBloodBtn.setText("Remove blood pressure monitor");

        bloodDetailsBtn.setText("View patient details");

        systolicThresholdText.setColumns(20);
        systolicThresholdText.setRows(1);
        systolicThresholdText.setText("140");

        systolicThresholdLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        systolicThresholdLabel.setText("Systolic blood pressure threshold [mmHg]");

        diastolicThresholdLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        diastolicThresholdLabel.setText("Diastolic blood pressure threshold [mmHg]");

        diastolicThresholdText.setColumns(20);
        diastolicThresholdText.setRows(1);
        diastolicThresholdText.setText("90");

        thresholdUpdateBtn.setText("Update thresholds");
        thresholdUpdateBtn.setActionCommand("");

        systolicErrorLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        systolicErrorLabel.setForeground(new java.awt.Color(240, 0, 0));
        systolicErrorLabel.setToolTipText("");

        javax.swing.GroupLayout bloodTablePanelLayout = new javax.swing.GroupLayout(bloodTablePanel);
        bloodTablePanel.setLayout(bloodTablePanelLayout);
        bloodTablePanelLayout.setHorizontalGroup(
            bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bloodTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bloodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bloodTablePanelLayout.createSequentialGroup()
                        .addComponent(bloodOptionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bloodDetailsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBloodBtn))
                    .addGroup(bloodTablePanelLayout.createSequentialGroup()
                        .addComponent(systolicThresholdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(systolicThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(diastolicThresholdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diastolicThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(thresholdUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bloodTablePanelLayout.createSequentialGroup()
                        .addComponent(bloodTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 1032, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(systolicErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bloodTablePanelLayout.setVerticalGroup(
            bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bloodTablePanelLayout.createSequentialGroup()
                .addComponent(bloodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(bloodTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodOptionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeBloodBtn)
                    .addComponent(bloodDetailsBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(diastolicThresholdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(diastolicThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(thresholdUpdateBtn))
                    .addGroup(bloodTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(systolicThresholdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(systolicThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(122, 122, 122)
                .addComponent(systolicErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        freqText.setColumns(20);
        freqText.setRows(1);
        freqText.setText("60");

        freqUpdateBtn.setText("Update");

        freqLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        freqLabel.setText("Update frequency (seconds)");

        patientDetailsLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        patientDetailsLabel.setText("Selected patient details");

        patientDetailsTextArea.setColumns(20);
        patientDetailsTextArea.setRows(5);

        freqUpdateLabel.setText("Must be at least 5 seconds");

        javax.swing.GroupLayout globalOptionsPanelLayout = new javax.swing.GroupLayout(globalOptionsPanel);
        globalOptionsPanel.setLayout(globalOptionsPanelLayout);
        globalOptionsPanelLayout.setHorizontalGroup(
            globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globalOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freqLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(globalOptionsPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(freqText, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(freqUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(freqUpdateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(globalOptionsPanelLayout.createSequentialGroup()
                        .addComponent(patientDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(patientDetailsTextArea))
                .addContainerGap())
        );
        globalOptionsPanelLayout.setVerticalGroup(
            globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globalOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freqLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(globalOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freqText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freqUpdateBtn))
                .addGap(15, 15, 15)
                .addComponent(freqUpdateLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(globalOptionsPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(patientDetailsTextArea)
                .addContainerGap())
        );

        patientDetailsTextArea.setEditable(false);

        javax.swing.GroupLayout monitorsTabPanelLayout = new javax.swing.GroupLayout(monitorsTabPanel);
        monitorsTabPanel.setLayout(monitorsTabPanelLayout);
        monitorsTabPanelLayout.setHorizontalGroup(
            monitorsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorsTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cholesterolTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(monitorsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bloodTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1055, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(globalOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        monitorsTabPanelLayout.setVerticalGroup(
            monitorsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorsTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorsTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(monitorsTabPanelLayout.createSequentialGroup()
                        .addComponent(bloodTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(globalOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cholesterolTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(253, 253, 253))
        );

        mainPanel.addTab("Monitors", null, monitorsTabPanel, "");

        javax.swing.GroupLayout windowLayout = new javax.swing.GroupLayout(window);
        window.setLayout(windowLayout);
        windowLayout.setHorizontalGroup(
            windowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(windowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        windowLayout.setVerticalGroup(
            windowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(windowLayout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.getAccessibleContext().setAccessibleName("Patients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(window, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(window, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Draw components to the user interface.
     */
    private void initView() {
        this.setVisible(true);
        hideUpdateOptions(); //Only show update frequency button if there is a monitor.
        displayPractitioner();
        listPatients();
    }
    
    /**
     * Set the displayed text for the practitionerNameLabel element to show which Practitioner is currently logged in.
     */
    private void displayPractitioner(){
        String practitionerName = model.getPractitionerName();
        practitionerNameLabel.setText(practitionerName);
    } 
    
    /**
     * Populate the patientTable element with a list of patients retrieved from 
     * the DashboardModel associated with this instance.
     */
    private void listPatients() {
        // Get patient data from Dashboard Model, then create a row in the table
        // for each patient
        DefaultTableModel tableModel= (DefaultTableModel) patientTable.getModel();
        Map<String, Patient> patients = getModel().getPatients();
        
        for (Map.Entry<String, Patient> patient: patients.entrySet()) {
            String id = patient.getKey();
            String givenName = patient.getValue().getGivenName();
            String familyName = patient.getValue().getFamilyName();
            tableModel.addRow(new Object[]{id, givenName, familyName, ""});
        }
    }
    
    /**
     * Get the cholesterol monitor (tracking) button.
     * @return JButton - Cholesterol monitor (tracking) button.
     */
    public JButton getCholesterolMonitorBtn(){
        // Return all monitor adding buttons
        return cholesterolBtn;
    }
    
    /**
     * Get the remove cholesterol monitor (untracking) button
     * @return JButton - Cholesterol monitor (untracking) button.
     */
    public JButton getRemoveCholesterolBtn(){
        return removeCholesterolBtn;
    }
    
    /**
     * Get the update frequency button.
     * @return JButton - Update frequency button.
     */
    public JButton getFreqUpdateBtn(){
        return freqUpdateBtn;
    }
    
    /**
     * Get the "Get patient details" button for a cholesterol monitor.
     * @return JButton - "Get patient details" button for a cholesterol monitor.
     */
    public JButton getCholesterolDetailsBtn(){
        return cholesterolDetailsBtn;
    }
    
    /**
     * Get the "Get patient details" button for a blood pressure monitor.
     * @return JButton - "Get patient details" button for a blood pressure monitor.
     */
    public JButton getBloodDetailsBtn(){
        return bloodDetailsBtn;
    }

    /**
     * Get the index of the row that the user has selected in the patient table.
     * @return Integer - Index of the row selected in the patient table.
     */
    public Integer getPatientTableSelectedRow(){
        Integer selectedRow = patientTable.getSelectedRow();
        return selectedRow;
    }
    
    /**
     * Get a value from the patient table at a given row and column.
     * @param row Integer - Index of the row to get the value from in the patient table.
     * @param column Integer - Index of the column to get the value from in the patient table.
     * @return String - The value returned from the patient table.
     */
    public String getValueFromPatientTable(Integer row, Integer column){
        String value = (String) patientTable.getValueAt(row, column);
        return value;
    }
        
    /**
     * Get the entire table storing cholesterol observations.
     * @return JTable - Cholesterol JTable. 
     */
    public JTable getCholesterolTable(){
        return cholesterolTable;
    }
    
    /**
     * Get the index of the row that the user has selected in the cholesterol table.
     * @return Integer - Index of selected row from the cholesterol table.
     */
    public Integer getCholesterolTableSelectedRow(){
        Integer selectedRow = cholesterolTable.getSelectedRow();
        return selectedRow;
    }
    
    /**
     * Get a value from the cholesterol table at a given row and column.
     * @param row Integer - Index of the row to get the value from in the cholesterol table.
     * @param column Integer - Index of the column to get the value from in the cholesterol table.
     * @return String - Value retrieved from the CholesterolTable.
     */
    public String getValueFromCholesterolTable(Integer row, Integer column){
        String value = (String) cholesterolTable.getValueAt(row, column);
        return value;
    }
    
    /**
     * Get the input text in the frequency box representing the number of seconds that the monitors are to be updated.
     * @return String - Frequency string.
     */
    public String getFrequencyString(){
        String text = freqText.getText();
        return text;
    }
    
    /**
     * Set the input text of the update frequency text-box to a default value.
     */
    public void setFrequencyToDefault(){
        freqText.setText("30");
    }
    
    /**
     * Set the patient details text area to include text of a given patient's details such as birthdate, gender and address (city, state, country).
     * @param details String - Patient details to include.
     */
    public void setPatientDetailsText(String details){
        patientDetailsTextArea.setText(details);
    }
    
    /**
     * Make update frequency button and text area visible only when there is a biometric being monitored.
     */
    public void showUpdateOptions(){
        freqUpdateBtn.setVisible(true);
        freqText.setVisible(true);
    }
    
    /**
     * Hide update frequency button and text area when there are no biometrics being monitored.
     */
    public void hideUpdateOptions(){
        freqUpdateBtn.setVisible(false);
        freqText.setVisible(false);
    }
    
    /**
     * Add a row associated with the argument values into the respective table of patient observations.
     * 
     * @param btnText String - The label text of the button for the selected monitor.
     * @param patientFullName String - The patientFullName of the patient to add to the monitor.
     * @param patientId String - The patient's id.
     */
    public void addMonitorTemplate(String observationName, String patientFullName, String patientId){
        // if statements are needed as view would need to know which table we are addding the monitor to
        // Get observation data for particular patient from Dashboard Model, then create a row in the table for the patient
        DefaultTableModel tableModel= null;
        if (observationName.equals(getObservationName().CHOLESTEROL.name())) {
            tableModel= (DefaultTableModel) cholesterolTable.getModel();
            tableModel.addRow(new Object[]{patientId, patientFullName, "", ""});
        }
        else if (observationName.equals(getObservationName().BLOOD.name())) {
            tableModel= (DefaultTableModel) bloodTable.getModel();
            tableModel.addRow(new Object[]{patientId, patientFullName, "", "", ""});
        }
    }
    
    /**
     * Update the cholesterol textual monitor.
     * Search the table for the row containing the patient with the associated id and update that row.
     * 
     * @param id String - The patient id.
     * @param updatedQuantity String - Updated biometric value to display in Dashboard.
     * @param unit String - The unit of the biometric value.
     * @param updatedTime String - The time at which the record was updated.
     */
    public void updateCholesterolTextualMonitor(String id, String updatedQuantity, String unit, String updatedTime){
        // Update table
        DefaultTableModel tableModel= null;
        Integer idColumnIndex = 0;
        Integer quantityIndex = 2;
        Integer timeIndex = 3;
        tableModel= (DefaultTableModel) cholesterolTable.getModel();
        // Find specific row with name
        for (Integer rowIndex = 0; rowIndex < tableModel.getRowCount(); rowIndex++) {
            String columnEntry = (String) tableModel.getValueAt(rowIndex, idColumnIndex);  
            if (columnEntry.equals(id)) {
                tableModel.setValueAt(updatedQuantity + " " + unit, rowIndex, quantityIndex);
                tableModel.setValueAt(updatedTime, rowIndex, timeIndex);
                break;
            }
        }
    }
    
    /**
     * Update the cholesterol bar chart.
     */
    public void updateCholesterolBarChart(){
        String unit = "";
        
        // Reset cholesterolDcd
        this.cholesterolDcd = new DefaultCategoryDataset();
        BiometricIterator it = this.storage.getCholesterolBiometricsContainer().getIterator();
        while (it.hasNext()){
            // 1. Get requestHandler for new observation data
            Map.Entry<String, Biometric> biometric = it.next();
            Biometric observation = biometric.getValue();
            getCholesterolDcd().setValue(Integer.parseInt(observation.getQuantity(getObservationName().CHOLESTEROL.name())), "Quantity", observation.getName());
            unit = observation.getUnit(getObservationName().CHOLESTEROL.name());
        }
        // String patientName, String quantity, String unit
        // Update graph
        // Testing bar chart
        // Set grid
        JFreeChart jchart = ChartFactory.createBarChart("Cholesterol", "Patient", "Total quantity " + unit, getCholesterolDcd(), PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.black);
        
        // Puts chart into cholesterolBarChartPanel panel
        ChartPanel chartPanel = new ChartPanel(jchart);
        chartPanel.setMinimumSize(chartPanel.getPreferredSize());
        this.cholesterolBarChartPanel.removeAll();
        this.cholesterolBarChartPanel.add(chartPanel);
        this.cholesterolBarChartPanel.updateUI();
    }
    
    
    /**
     * Update the highlighting of all rows in the cholesterol table to reflect
     * the new average.
     * 
     * Clears the formatting of each entry in the table, colouring it again if 
     * the measured value is higher than the average and if the table size is 
     * larger than 1.
     * 
     * @param avg Integer - the new average cholesterol value with which to update the 
     * table.
     */
    public void updateCholesterolAverage(Integer avg) {
        DefaultTableModel tableModel= (DefaultTableModel) cholesterolTable.getModel();
        Integer nameIndex = 1;
        Integer quantityIndex = 2;
        
        // only update colour if there is more than one row
        
        // Iterate through each row to check if the total cholesterol quantity is greater than the average
        for (Integer rowIndex = 0; rowIndex < tableModel.getRowCount(); rowIndex++) {
            // Process quantity and name
            String quantityEntry = (String) tableModel.getValueAt(rowIndex, quantityIndex);  
            String nameEntry = (String) tableModel.getValueAt(rowIndex, nameIndex);  
            
            // Reset colours if some text already has colours
            quantityEntry = quantityEntry.replace("<html><font color=red>", "");
            quantityEntry = quantityEntry.replace("</font>", "");
            nameEntry = nameEntry.replace("<html><font color=red>", "");
            nameEntry = nameEntry.replace("</font>", "");
            
            String quantity = quantityEntry.split(" ")[0];
            String unit = quantityEntry.split(" ")[1];
            
            // Always set to no colour first
            tableModel.setValueAt(quantity + " " + unit, rowIndex, quantityIndex);
            tableModel.setValueAt(nameEntry, rowIndex, nameIndex);
            
            // Highlight quantity and name if it is above the total average quantity
            if (tableModel.getRowCount()>1) {
                if ((Integer.parseInt(quantity) > avg)) {
                    tableModel.setValueAt("<html><font color=red>" + quantity + " " + unit + "</font>" , rowIndex, quantityIndex);
                    tableModel.setValueAt("<html><font color=red>" + nameEntry + "</font>" , rowIndex, nameIndex);
                }  
            }
        }
    }
    
    /**
     * Set an error message for the user. E.G. if a selected patient does not have a given biometric,
     * and the user tries to monitor that biometric.
     * @param text String - text to be displayed to the user.
     */
    public void setPatientErrorText(String text) {
        patientErrorTextArea.setText(text);
    }
    
    /**
     * Get the cholesterol text monitor which observes all cholesterol observations.
     * @return BiometricTextMonitor
     */
    public BiometricTextMonitor getCholesterolTextMonitor(){
        return getMonitorSelector().selectTextMonitor("cholesterolTextMonitor");
    }
    
    /**
     * Get the cholesterol graph monitor which observes all cholesterol observations.
     * @return BiometricGraphMonitor
     */
    public void updateCholesterolGraphMonitor(){
        getMonitorSelector().selectGraphMonitor("cholesterolGraphMonitor").update();
    }
    
    /**
     * Get cholesterol bar chart panel.
     * @return JPanel - Panel for cholesterol bar chart.
     */
    public JPanel getCholesterolBarChartPanel(){
        return this.cholesterolBarChartPanel;
    }
    
    /**
     * Get 'blood monitor' monitor button.
     * @return JButton - Monitor button.
     */
    public JButton getBloodMonitorBtn(){
        return bloodBtn;
    }
    
    /**
     * Get remove blood monitor button.
     * @return JButton - Remove monitor button.
     */
    public JButton getRemoveBloodBtn(){
        return removeBloodBtn;
    }
    
    /**
     * Get the blood pressure text monitor which observes all blood pressure observations.
     * @return BiometricTextMonitor - Blood pressure text monitor.
     */
    public BiometricTextMonitor getBloodTextMonitor(){
        return getMonitorSelector().selectTextMonitor("bloodTextMonitor");
    }

    /**
     * Update the blood pressure text monitor.
     * @param id String - Patient id.
     * @param diastolicQty String - Diastolic blood pressure quantity.
     * @param diastolicUnit String - Diastolic blood pressure unit.
     * @param systolicQty String - Systolic blood pressure quantity.
     * @param systolicUnit String - Systolic blood pressure unit. 
     * @param updatedTime String - Updated effective date time at which observation was made.
     */
    public void updateBloodTextMonitor(String id, String diastolicQty, String diastolicUnit, String systolicQty, String systolicUnit, String updatedTime){
        // Update table
        DefaultTableModel tableModel= null;
        Integer idColumnIndex = 0;
        Integer systolicIndex = 2;
        Integer diastolicIndex = 3;
        Integer timeIndex = 4;
        tableModel= (DefaultTableModel) bloodTable.getModel();
        // Find specific row with name
        for (Integer rowIndex = 0; rowIndex < tableModel.getRowCount(); rowIndex++) {
            String columnEntry = (String) tableModel.getValueAt(rowIndex, idColumnIndex);  
            if (columnEntry.equals(id)) {
                tableModel.setValueAt(systolicQty + " " + systolicUnit, rowIndex, systolicIndex);
                tableModel.setValueAt(diastolicQty + " " + diastolicUnit, rowIndex, diastolicIndex);
                tableModel.setValueAt(updatedTime, rowIndex, timeIndex);
                break;
            }
        }
    }
    
    /**
     * Get the index of the row that the user has selected in the blood pressure monitor table.
     * @return Integer - Index of the selected row.
     */
    public Integer getBloodTableSelectedRow(){
        return bloodTable.getSelectedRow();
    }
    
    /**
     * Removes a row from the blood pressure monitor table.
     * @param row - Index of row to remove.
     */
    public void removeBloodTableRow(Integer row){
        JTable bloodTable = getBloodTable();
        ((DefaultTableModel)bloodTable.getModel()).removeRow(row);
    }
    
    /**
     * Removes a row from the cholesterol monitor table.
     * @param row - Index of row to remove.
     */
    public void removeCholesterolTableRow(Integer row){
        JTable cholesterolTable = getCholesterolTable();
        ((DefaultTableModel)cholesterolTable.getModel()).removeRow(row);
    }
    
    /**
     * Get a value from the blood pressure table at a given row and column.
     * @param row Integer - Index of row to get value from.
     * @param column Integer - Index of column to get value from.
     * @return String - Value retrieved from the blood pressure table.
     */
    public String getValueFromBloodTable(Integer row, Integer column){
        String value = (String) bloodTable.getValueAt(row, column);
        return value;
    }
    
    /**
     * Get the entire table storing blood pressure observations.
     * @return JTable - Blood pressure monitor table.
     */
    public JTable getBloodTable(){
        return bloodTable;
    }
    
    /**
     * Get the update thresholds button.
     * @return JButton
     */
    public JButton getThresholdUpdateBtn(){
        return thresholdUpdateBtn;
    }

    /**
     * Get systolic threshold string.
     * @return String - Systolic threshold.
     */
    public String getSystolicThresholdString(){
        return systolicThresholdText.getText();
    }
    
    /**
     * Get diastolic threshold string.
     * @return String - Diastolic threshold.
     */
    public String getDiastolicThresholdString(){
        return diastolicThresholdText.getText();
    }
    
    /**
     * Set the input text of the update thresholds text-box to some default value.
     */
    public void setThresholdsToDefault(){
        systolicThresholdText.setText("140");
        diastolicThresholdText.setText("90");
    }
    
    /**
     * Highlight blood pressures which are above the threshold.
     * @param systolicThreshold - Systolic threshold.
     * @param diastolicThreshold - Diastolic threshold.
     */
    public void updateBloodOverThreshold(Integer systolicThreshold, Integer diastolicThreshold) {
        DefaultTableModel tableModel = (DefaultTableModel) bloodTable.getModel();
        Integer nameIndex = 1;
        Integer systolicIndex = 2;
        Integer diastolicIndex = 3;
        
        // Iterate through each row to check if the total cholesterol quantity is greater than the average
        for (Integer rowIndex = 0; rowIndex < tableModel.getRowCount(); rowIndex++) {
            // Process quantity and name
            String nameEntry = (String) tableModel.getValueAt(rowIndex, nameIndex);  
            String systolicEntry = (String) tableModel.getValueAt(rowIndex, systolicIndex);  
            String diastolicEntry = (String) tableModel.getValueAt(rowIndex, diastolicIndex);  
            
            // Reset colours if some text already has colours
            nameEntry = nameEntry.replace("<html><font color=purple>", "");
            nameEntry = nameEntry.replace("</font>", "");
            systolicEntry = systolicEntry.replace("<html><font color=purple>", "");
            systolicEntry = systolicEntry.replace("</font>", "");
            diastolicEntry = diastolicEntry.replace("<html><font color=purple>", "");
            diastolicEntry = diastolicEntry.replace("</font>", "");
            
            String systolicQuantity = systolicEntry.split(" ")[0];
            String systolicUnit = systolicEntry.split(" ")[1];
            String diastolicQuantity = diastolicEntry.split(" ")[0];
            String diastolicUnit = diastolicEntry.split(" ")[1];
            
            // Always set to no colour first
            tableModel.setValueAt(nameEntry, rowIndex, nameIndex);
            tableModel.setValueAt(systolicQuantity + " " + systolicUnit, rowIndex, systolicIndex);
            tableModel.setValueAt(diastolicQuantity + " " + systolicUnit, rowIndex, diastolicIndex);
            
            // Highlight quantities and name if it is above the thresholds
            if ((Integer.parseInt(systolicQuantity) > systolicThreshold)) {
                tableModel.setValueAt("<html><font color=purple>" + nameEntry + "</font>" , rowIndex, nameIndex);
                tableModel.setValueAt("<html><font color=purple>" + systolicQuantity + " " + systolicUnit + "</font>" , rowIndex, systolicIndex);
            }
            if ((Integer.parseInt(diastolicQuantity) > diastolicThreshold)) {
                tableModel.setValueAt("<html><font color=purple>" + nameEntry + "</font>" , rowIndex, nameIndex);
                tableModel.setValueAt("<html><font color=purple>" + diastolicQuantity + " " + diastolicUnit + "</font>" , rowIndex, diastolicIndex);
            }
        }
    }
    
    /**
     * Set an error message for the user if they try to set a latest systolic monitor where the systolic measurement is not above the threshold.
     * @param text String - text to be displayed to the user.
     */
    public void setSystolicErrorLabel(String text) {
        systolicErrorLabel.setText(text);
    }
    
    /**
     * Gets model attribute
     * @return DashboardModel
     */
    private DashboardModel getModel(){
        return this.model;
    }
    
    /**
     * Gets storage attribute.
     * @return ObserveStorage
     */
    private ObserveStorage getStorage(){
        return this.storage;
    }
    
    /**
     * Gets observationName attribute.
     * @return ObservationName
     */
    private ObservationName getObservationName(){
        return this.observationName;
    }
    
    /**
     * Gets monitorSelector attribute.
     * @return MonitorSelector
     */
    private MonitorSelector getMonitorSelector(){
        return this.monitorSelector;
    }
    
    /**
     * Gets cholesterolDcd attribute.
     * @return DefaultCategoryDataset
     */
    private DefaultCategoryDataset getCholesterolDcd(){
        return this.cholesterolDcd;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bloodBtn;
    private javax.swing.JButton bloodDetailsBtn;
    private javax.swing.JLabel bloodLabel;
    private javax.swing.JLabel bloodOptionsLabel;
    private javax.swing.JTable bloodTable;
    private javax.swing.JPanel bloodTablePanel;
    private javax.swing.JScrollPane bloodTableScroll;
    private javax.swing.JPanel cholesterolBarChartPanel;
    private javax.swing.JButton cholesterolBtn;
    private javax.swing.JButton cholesterolDetailsBtn;
    private javax.swing.JLabel cholesterolLabel;
    private javax.swing.JLabel cholesterolOptionsLabel;
    private javax.swing.JTable cholesterolTable;
    private javax.swing.JPanel cholesterolTablePanel;
    private javax.swing.JScrollPane cholesterolTableScroll;
    private javax.swing.JLabel dashboardLabel;
    private javax.swing.JLabel diastolicThresholdLabel;
    private javax.swing.JTextArea diastolicThresholdText;
    private javax.swing.JLabel freqLabel;
    private javax.swing.JTextArea freqText;
    private javax.swing.JButton freqUpdateBtn;
    private javax.swing.JLabel freqUpdateLabel;
    private javax.swing.JPanel globalOptionsPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JTabbedPane mainPanel;
    private javax.swing.JLabel monitorLabel;
    private javax.swing.JPanel monitorsTabPanel;
    private javax.swing.JLabel patientDetailsLabel;
    private javax.swing.JTextArea patientDetailsTextArea;
    private javax.swing.JTextArea patientErrorTextArea;
    private javax.swing.JTable patientTable;
    private javax.swing.JScrollPane patientTableScroll;
    private javax.swing.JPanel patientsTabPanel;
    private javax.swing.JLabel practitionerNameLabel;
    private javax.swing.JButton removeBloodBtn;
    private javax.swing.JButton removeCholesterolBtn;
    private javax.swing.JLabel systolicErrorLabel;
    private javax.swing.JLabel systolicThresholdLabel;
    private javax.swing.JTextArea systolicThresholdText;
    private javax.swing.JButton thresholdUpdateBtn;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JPanel window;
    // End of variables declaration//GEN-END:variables
}
